using ShopApi.Data.Models;
using System.ComponentModel.DataAnnotations;
using Xunit;

namespace ShopApi.Tests
{
    public class CategoryTests
    {
        [Fact]
        public void Category_Description_IsRequired()
        {
            // Arrange
            var category = new Category();

            // Act
            var validationResults = ValidateModel(category);

            // Assert
            Assert.Contains(validationResults, 
                v => v.MemberNames.Contains("Description") && 
                     v.ErrorMessage.Contains("required"));
        }

        [Fact]
        public void Category_CanBeCreated_WithValidProperties()
        {
            // Arrange
            var category = new Category
            {
                Description = "Test Category"
            };

            // Act
            var validationResults = ValidateModel(category);

            // Assert
            Assert.Empty(validationResults);
        }

        [Fact]
        public void Category_Id_IsAutoGenerated()
        {
            // Arrange
            var category = new Category
            {
                Description = "Test Category"
            };

            // Act
            var idBeforeSave = category.Id;
            // In a real test, you'd save to DB and check if ID was generated
            // For this test, we'll just check the default

            // Assert
            Assert.Equal(0, idBeforeSave);
        }

        [Fact]
        public void Category_Description_CanBeSetAndRetrieved()
        {
            // Arrange
            var expectedDescription = "Test Category";
            var category = new Category();

            // Act
            category.Description = expectedDescription;
            var actualDescription = category.Description;

            // Assert
            Assert.Equal(expectedDescription, actualDescription);
        }

        private static List<ValidationResult> ValidateModel(object model)
        {
            var validationResults = new List<ValidationResult>();
            var ctx = new ValidationContext(model, null, null);
            Validator.TryValidateObject(model, ctx, validationResults, true);
            return validationResults;
        }
    }
}